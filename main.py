import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatMemberUpdated
from datetime import datetime
import os

from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7720705041:AAF_OhKsVZV1QGca-gh_kM0Lc90brfuDUF8"
TOKEN = os.environ.get("7720705041:AAF_OhKsVZV1QGca-gh_kM0Lc90brfuDUF8")

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
PASHA_ID = 722401589  # –ü–∞—à–∞
SASHA_ID = 1038044523  # –°–∞—à–∞
#TARGET_USER_ID2 = 642818159  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π user_id

# –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
PASHA_RESPONSES = [
    "–ò–¥–∏ –Ω–∞—Ö–µ—Ä, –¥–∞—É–Ω",
    "–ò —á—ë, –¥–æ–ª–±–∞—ë–±",
    "–ù–µ—Ç, —Ç—ã –¥–∞—É–Ω",
    "–ò–¥–∏ –Ω–∞—Ö–µ—Ä, –¥–æ–ª–±–∞—ë–±",
    "–õ–∞–¥–Ω–æ, –¥–∞—É–Ω, –ª–∞–¥–Ω–æ",
    "–¢—ã –¥–æ–ª–±–∞—ë–± –ø—Ä–æ—Å—Ç–æ",
    "–ê —Ç—ã –¥–∞—É–Ω"
]

SASHA_RESPONSES = [
    "–õ–∞–¥–Ω–æ, –°–∞—à–∞, –ª–∞–¥–Ω–æ",
    "–°–≤–∏–Ω—å–µ —Å–ª–æ–≤–æ –Ω–µ –¥–∞–≤–∞–ª–∏",
    "–ö–∞–∫ –∂–µ —Ç—ã –∑–∞–µ–±–∞–ª —Å–ø–∞–º–∏—Ç—å —Ö—É–π–Ω—é",
    "–ö–∞–∫ –∂–µ —Ç—ã –∑–∞–µ–±–∞–ª —Å–ø–∞–º–∏—Ç—å —Ö—É–π–Ω—é",
    "–ö–∞–∫ –∂–µ —Ç—ã –∑–∞–µ–±–∞–ª —Å–ø–∞–º–∏—Ç—å —Ö—É–π–Ω—é"
]

GOOD_RESPONSES = [
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä!",
    "–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è)",
    "–î–µ—Ä–∂–∏ –∫–æ—Ç–∏–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üêà",
    "–û–Ω–æ —Ç–µ–±–µ –Ω–∞–¥–æ?",
    "–õ—É—á—à–µ –±—ã –≤ –∫–∞–∑–∏–Ω–æ –¥–µ–ø–Ω—É–ª–∏",
    "–°–ª–æ–≤–∞ –º–æ–µ–π –ø–æ–¥—Ä—É–∂–∫–∏",
    "–ê—Ö–∞—Ö–∞—Ö–∞–∞—Ö–∞—Ö",
    "–ê–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–ê–•",
    "–õ–∞–¥–Ω–æ",
    "–ë–µ–∑ –ª–∏—á–Ω–æ—Å—Ç–µ–π",
    "–í –∂–∏–∑–Ω–∏ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –Ω–µ –≤—Å—ë –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ\n\n¬© –ü–∞–≤–µ–ª –ò–ª—å–∏—á"

]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def calculate_days_to_may():
    today = datetime.now()
    may_first = datetime(2025, 5, 1)
    delta = may_first - today
    return delta.days

@dp.message_handler(commands=['mayskie'])
async def send_days_to_may(message: types.Message):
    days_left = calculate_days_to_may()
    await message.reply(f"–î–æ –º–∞–π—Å–∫–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π ‚òÄÔ∏è")


@dp.chat_member()
async def on_new_chat_member(update: ChatMemberUpdated):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç."""
    if update.new_chat_member.user.id == (await bot.me()).id:
        await bot.send_message(update.chat.id, "–ò–¥–∏—Ç–µ –Ω–∞—Ö–µ—Ä")


@dp.message_handler(lambda message: "–∏–¥–∏" in message.text.lower())
async def reply_idi(message: types.Message):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ "–∏–¥–∏" (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    text_after_idi = message.text.lower().split("–∏–¥–∏", 1)[-1].strip()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç: "–∏–¥–∏..." + –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç (–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    reply_text = f"–°–∞–º(–∞) –∏–¥–∏{text_after_idi}"
    await message.reply(reply_text)


@dp.message()
async def reply_to_target_user(message: types.Message):
    if message.from_user.id == PASHA_ID:
        is_answer = random.randint(0, 8)
        if is_answer == 1:
            response = random.choice(PASHA_RESPONSES)
            await message.reply(response)
    if message.from_user.id == SASHA_ID:
        is_answer = random.randint(0, 13)
        if is_answer == 1:
            response = random.choice(SASHA_RESPONSES)
            await message.reply(response)
    if message.from_user.id != SASHA_ID and message.from_user.id != PASHA_ID:
        is_answer = random.randint(0, 15)
        if is_answer == 1:
            response = random.choice(GOOD_RESPONSES)
            await message.reply(response)
  #  if message.from_user.id == TARGET_USER_ID2:
   #     await message.reply("–ø—Ä–æ–≤–µ—Ä–∫–∞")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
